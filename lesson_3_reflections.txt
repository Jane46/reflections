--------------------------------------------------------------------
When would you want to create a remote repository rather than keeping all your work local?
----------------------------------------------------------------

I can think of a couple of reasons. One is if you want to share or make public your code. Another is if you want to collaborate with others on the project. A third might be if you want an offsite back-up of your local code.


-------------------------
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
----------------------------------

Because it's possible changes were made to the remote that I'm not aware of and wouldn't want in my local repository. Other users could make changes to the remote or changes on other computers can get pushed to GitHub. I might not want these changes automatically pulled to my local repository until I've had a chance to look at them.

--------------------------------------------
Describe the differences between forks, clones, and branches. When would you use one instead of another?
------------------------------------------

A clone is a copy of a repository. A fork is GitHub's version of a clone on its servers. A branch is a separate version of code taking off from the master branch that allows you to explore experimental or side issues without affecting the main branch. You can leave it as a separate track or you can integrate it into the master branch. You would use a clone when you want a copy of a repository on your own local computer. You use a fork when you want a copy on GitHub. You use a branch when you want to experiment without messing with the working main branch.

----------------------------------------
What is the benefit of having a copy of the last known state of the remote stored locally?
-----------------------------

If you're current and in synch with the remote, you will be current with what your collaborators are doing. You won't be working on out-of-date code, reinventing the wheel, or working at cross-purposes with your collaborators.

----------------------------------
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
------------------------------
I suppose a master file would be created with the word "master" in it and somebody would be designated as the only person who could make changes to that file. The file would be downloadable by everybody on the team. Perhaps a version number would also be appended so that people could tell whether they had the current version. Every time a change is made, the version number would be incremented by 1. A file would have a name like: asteroidsMaster-127. There would then be a lot of emailing around to discuss proposed changes to the master. When agreement was reached, the designated person would change the master and increment the version number, e.g. asteroidsMaster-128.

We all know how emailing can quickly overwhelm you, especially if lots of people are participating. Perhaps instead of using email, people could put their comments in a file stored online, and the discussion would take place there. Something like a wiki.

Norms would have to be established as to when/how the plug would be pulled on the discussion, and consensus would be declared. Otherwise discussion could go on forever.

It does seem as if GitHub is a dedicated answer to this problem of collaboration and version control and is a nifty way to go.

------------------------------------------
When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
-------------------------------------------------

Making changes in a separate branch rather than in master would seem to make sense when you are experimenting and want to be sure yourself about your changes and also run your changes by people you're collaborating with before merging them into master. When you're collaborating, it's important for others to get a chance to comment on changes before they're merged into master.

---------------------------------





